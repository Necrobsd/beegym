# -*- coding: utf-8 -*-
# Example code for telegrambot.py module
from telegram.ext import CommandHandler, MessageHandler, Filters
from telegram import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from django_telegrambot.apps import DjangoTelegramBot
from . models import Groups, Subscribers, SubscribersInGroups, WelcomeText, PhotoMessages, TextMessages
from upload_1c.models import Cards
from django.core.exceptions import ObjectDoesNotExist
import logging
from django.utils.timezone import localtime, now, timedelta
from .tasks import TIMEOUT
import time
from django.contrib.auth import authenticate
from . tasks import send_message
from bot_stat.models import UsedFunctions

logger = logging.getLogger(__name__)

BUTTONS_IN_ROW = 2
TEXT_FOR_SUBSCRIBE = '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å'
TEXT_FOR_UNSUBSCRIBE = '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å'
TEXT_NO_MORE_TO_SUBSCRIBE = '–ë–æ–ª—å—à–µ –Ω–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏'
TEXT_NO_MORE_TO_UNSUBSCRIBE = '–ë–æ–ª—å—à–µ –Ω–µ—Ç –≥—Ä—É–ø–ø, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è'
TEXT_CANCEL_LAST_OPERATION = '–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
TEXT_CANT_FIND_GROUP = '–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É'
SAD_EMOJI = 'üò£'
TEXT_STAFF_LOGIN_SUCCESS = '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏, –∏ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å ' \
                           '—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞".'
TEXT_STAFF_LOGIN_ERROR = '–í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ: –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.'
TEXT_CARD_NOT_FOUND = '*–ù–∞ –∫–∞—Ä—Ç–µ —Å –Ω–æ–º–µ—Ä–æ–º {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.*\n'\
                      '_–ï—Å–ª–∏ –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ–¥–∞–≤–Ω–æ, '\
                      '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ_'

MAILING_GROUP = {}

main_keyboard = [
    [KeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è")],
    [KeyboardButton("–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")],
    [KeyboardButton("–°–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π")],
    [KeyboardButton("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞")],
    [KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–∫–∏–Ω—É—Ç—å –Ω–∞—Å")]
]

staff_keyboard = [
    [KeyboardButton("–ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")],
    [KeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è")],
    [KeyboardButton("–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")],
    [KeyboardButton("–°–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π")],
    [KeyboardButton("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞")],
    [KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–∫–∏–Ω—É—Ç—å –Ω–∞—Å")]
]

cancel_keyboard = [
    [KeyboardButton("–û—Ç–º–µ–Ω–∞")]
]

cancel_reply_markup = ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True)
main_reply_markup = ReplyKeyboardMarkup(main_keyboard)
staff_reply_markup = ReplyKeyboardMarkup(staff_keyboard)

# Define a few command handlers. These usually take the two arguments bot and
# update. Error handlers also receive the raised TelegramError object in error.


def _save_stat_used_functions(subscriber, function):
    used_function, created = UsedFunctions.objects.get_or_create(
        subscriber=subscriber, function=function
    )
    used_function.count += 1
    used_function.save()


def start(bot, update):
    try:
        subscriber = Subscribers.objects.get(chat_id=update.message.chat_id)
        update.message.reply_text('–†–∞–¥—ã —Å–Ω–æ–≤–∞ –í–∞—Å –≤–∏–¥–µ—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                  reply_markup=main_reply_markup)
    except ObjectDoesNotExist:
        name = update.effective_user.first_name
        if update.effective_user.last_name:
            name += ' {}'.format(update.effective_user.last_name)
        subscriber = Subscribers.objects.create(chat_id=update.message.chat_id, name=name)
        try:
            default_group = Groups.objects.get(is_default=True)
            subscriber.groups.create(group=default_group)
        except ObjectDoesNotExist:
            pass
        try:
            welcome = WelcomeText.objects.last().text
        except:
            welcome = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'
        update.message.reply_text(welcome, reply_markup=main_reply_markup)
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫—É –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏
        current_offers = PhotoMessages.objects.filter(expiration_date__gte=localtime(now()))
        if current_offers:
            for offer in current_offers:
                time.sleep(TIMEOUT)
                update.message.reply_photo(photo=offer.image,
                                           caption=offer.text,
                                           reply_markup=main_reply_markup)
        time.sleep(TIMEOUT)
        bot.sendMessage(472186134, '–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {}'.format(name))


def stop(bot, update):
    subscriber = Subscribers.objects.get(chat_id=update.message.chat_id)
    subscriber.delete()
    update.message.reply_text('*–°–ø–∞—Å–∏–±–æ —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏!*\n'
                              '–í—Å–µ –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã.\n'
                              '–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!', parse_mode='Markdown',
                              reply_markup=ReplyKeyboardRemove())


def _check_subscriber_exists(update):
    try:
        subscriber = Subscribers.objects.get(chat_id=update.message.chat_id)
        return subscriber
    except ObjectDoesNotExist:
        update.message.reply_text('*–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã*\n'
                                  '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n'
                                  '_/start_',
                                  parse_mode='Markdown')
        return None


def _is_staff(subscriber):
    return subscriber.exp_date_staff and subscriber.exp_date_staff > localtime(now())


def _get_groups_for_subscribe(update):
    subscriber = Subscribers.objects.get(chat_id=update.message.chat_id)
    current_groups_ids = [group.group.id for group in subscriber.groups.all()]
    groups_for_subscribe = [group.name for group in Groups.objects.exclude(id__in=current_groups_ids)]
    return groups_for_subscribe


def _get_groups_for_unsibscribe(update):
    subscriber = Subscribers.objects.get(chat_id=update.message.chat_id)
    current_groups = [group.group.name for group in subscriber.groups.exclude(group__is_default=True)]
    return current_groups


def add(bot, update):
    subscriber = _check_subscriber_exists(update)
    if subscriber:
        groups_for_subscribe = _get_groups_for_subscribe(update)
        if groups_for_subscribe:
            buttons = [KeyboardButton(group_name) for group_name in groups_for_subscribe]
            keyboard = [buttons[d:d + BUTTONS_IN_ROW] for d in range(0, len(buttons), BUTTONS_IN_ROW)]
            keyboard.append([KeyboardButton('–û—Ç–º–µ–Ω–∞')])
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            update.message.reply_text(TEXT_FOR_SUBSCRIBE, reply_markup=reply_markup)
            subscriber.subscribing_status = 'sub'
            subscriber.save()
        else:
            subscriber.subscribing_status = None
            subscriber.save()
            update.message.reply_text(
                TEXT_NO_MORE_TO_SUBSCRIBE,
                reply_markup=staff_reply_markup if _is_staff(subscriber) else main_reply_markup)
        _save_stat_used_functions(subscriber=subscriber, function='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è')


def delete(bot, update):
    subscriber = _check_subscriber_exists(update)
    if subscriber:
        current_groups = _get_groups_for_unsibscribe(update)
        if current_groups:
            buttons = [KeyboardButton(group_name) for group_name in current_groups]
            keyboard = [buttons[d:d+BUTTONS_IN_ROW] for d in range(0, len(buttons), BUTTONS_IN_ROW)]
            keyboard.append([KeyboardButton('–û—Ç–º–µ–Ω–∞')])
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            update.message.reply_text(TEXT_FOR_UNSUBSCRIBE, reply_markup=reply_markup)
            subscriber.subscribing_status = 'unsub'
            subscriber.save()
        else:
            subscriber.subscribing_status = None
            subscriber.save()
            update.message.reply_text(
                TEXT_NO_MORE_TO_UNSUBSCRIBE,
                reply_markup=staff_reply_markup if _is_staff(subscriber) else main_reply_markup)
        _save_stat_used_functions(subscriber=subscriber, function='–û—Ç–ø–∏—Å–∞—Ç—å—Å—è')


def card(bot, update):
    subscriber = _check_subscriber_exists(update)
    if subscriber:
        update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –ø—è—Ç–∏–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä –í–∞—à–µ–π –∫–∞—Ä—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞',
            parse_mode='Markdown',
            reply_markup=cancel_reply_markup)
        subscriber.subscribing_status = 'card_expire'
        subscriber.save()
        _save_stat_used_functions(subscriber=subscriber, function='–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞')


def groups_list_and_timetable(bot, update):
    subscriber = _check_subscriber_exists(update)
    if subscriber:
        groups = Groups.objects.exclude(is_default=True)
        groups_text = '*–°–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π:*\n'
        for count, group in enumerate(groups, 1):
            groups_text += '*{}. {}* _- {}_\n'.format(count, group.name, group.description)
            if group.timetable:
                groups_text += '*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:*\n_{}_\n'.format(group.timetable)
        update.message.reply_text(
            groups_text,
            parse_mode='Markdown',
            reply_markup=staff_reply_markup if _is_staff(subscriber) else main_reply_markup)
        _save_stat_used_functions(subscriber=subscriber, function='–°–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π')


def get_my_subscribes(bot, update):
    subscriber = _check_subscriber_exists(update)
    if subscriber:
        subscribes_list = [group.group.name for group in subscriber.groups.all()]
        subscribes_list_text = ''
        for group_name in subscribes_list:
            subscribes_list_text += '- {}\n'.format(group_name)
        update.message.reply_text(
            '*–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:*\n'
            '_{}_'.format(subscribes_list_text),
            parse_mode='Markdown',
            reply_markup=staff_reply_markup if _is_staff(subscriber) else main_reply_markup
        )
        _save_stat_used_functions(subscriber=subscriber, function='–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏')


def help(bot, update):
    bot.sendMessage(update.message.chat_id, text='Help!')
    bot.sendMessage()


# def timetable(bot, update):
#     subscriber = _check_subscriber_exists(update)
#     if subscriber:
#         timetable_text = ''
#         for group in Groups.objects.exclude(is_default=True):
#             if group.timetable:
#                 timetable_text += '*{}*\n_{}_\n'.format(group.name, group.timetable)
#         if timetable_text:
#             update.message.reply_text(
#                 timetable_text,
#                 parse_mode='Markdown',
#                 reply_markup=staff_reply_markup if _is_staff(subscriber) else main_reply_markup)
#         else:
#             update.message.reply_text(
#                 '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.',
#                 parse_mode='Markdown',
#                 reply_markup=staff_reply_markup if _is_staff(subscriber) else main_reply_markup)
#         _save_stat_used_functions(subscriber=subscriber, function='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')


def login(bot, update):
    subscriber = _check_subscriber_exists(update)
    if subscriber:
        if _is_staff(subscriber):
            update.message.reply_text(TEXT_STAFF_LOGIN_SUCCESS,
                                      reply_markup=staff_reply_markup)
        else:
            subscriber.subscribing_status = 'login'
            subscriber.save()
            update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, '
                                      '–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞',
                                      reply_markup=cancel_reply_markup)


def get_mailing_group(bot, update):
    subscriber = _check_subscriber_exists(update)
    if subscriber:
        if _is_staff(subscriber):
            groups = [group.name for group in Groups.objects.all()]
            buttons = [KeyboardButton(group_name) for group_name in groups]
            keyboard = [buttons[d:d + BUTTONS_IN_ROW] for d in range(0, len(buttons), BUTTONS_IN_ROW)]
            keyboard.append([KeyboardButton('–û—Ç–º–µ–Ω–∞')])
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', reply_markup=reply_markup)
            subscriber.subscribing_status = 'get_mailing_group'
            subscriber.save()
        else:
            update.message.reply_text(
                '–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É: _/login_',
                parse_mode='Markdown',
                reply_markup=main_reply_markup)


def get_mailing_text(bot, update):
    subscriber = _check_subscriber_exists(update)
    if subscriber:
        if _is_staff(subscriber):
            subscriber.mailing_group = update.message.text
            update.message.reply_text(
                '–ù–∞–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ, '
                '–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"',
                reply_markup=cancel_reply_markup)
            subscriber.subscribing_status = 'get_mailing_text'
            subscriber.save()
        else:
            update.message.reply_text(
                '–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É: /login',
                reply_markup=main_reply_markup)


def send_mailing(bot, update):
    subscriber = _check_subscriber_exists(update)
    if subscriber:
        subscriber.subscribing_status = None
        if _is_staff(subscriber):
            group_name = subscriber.mailing_group
            print(group_name)
            if group_name:
                try:
                    group = Groups.objects.get(name=group_name)
                    if update.message.text == "–û—Ç–º–µ–Ω–∞":
                        print('–û–¢–ú–ï–ù–ê')
                        update.message.reply_text(
                            TEXT_CANCEL_LAST_OPERATION,
                            reply_markup=staff_reply_markup)
                    else:
                        message = TextMessages.objects.create(group=group, text=update.message.text)
                        update.message.reply_text(
                            '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É',
                            reply_markup=staff_reply_markup)
                        send_message.delay(text_message=message.id)
                except ObjectDoesNotExist:
                    update.message.reply_text(
                        '–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ –µ–µ —É–¥–∞–ª–∏–ª–∏',
                        reply_markup=staff_reply_markup)
                subscriber.mailing_group = None
                subscriber.save()
            else:
                update.message.reply_text(
                    '–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞',
                    reply_markup=staff_reply_markup)


def cancel_last_operation(update, subscriber):
    subscriber.subscribing_status = None
    subscriber.save()
    update.message.reply_text(
        TEXT_CANCEL_LAST_OPERATION,
        reply_markup=staff_reply_markup if _is_staff(subscriber) else main_reply_markup)


def text(bot, update):
    subscriber = _check_subscriber_exists(update)
    if subscriber:
        if not subscriber.subscribing_status:
            if update.message.text == '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è':
                add(bot, update)
            elif update.message.text == '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è':
                delete(bot, update)
            elif update.message.text == '–°–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π':
                groups_list_and_timetable(bot, update)
            elif update.message.text == '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏':
                get_my_subscribes(bot, update)
            elif update.message.text == '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞':
                card(bot, update)
            # elif update.message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π':
            #     timetable(bot, update)
            elif update.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–∫–∏–Ω—É—Ç—å –Ω–∞—Å':
                stop(bot, update)
            elif update.message.text == '–ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞':
                get_mailing_group(bot, update)
            else:
                update.message.reply_text(
                    '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã: "{}"\n{}'.format(update.message.text,
                                                                         SAD_EMOJI))
                update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                          reply_markup=staff_reply_markup if _is_staff(subscriber)
                                          else main_reply_markup)
        else:
            if subscriber.subscribing_status == 'sub':
                if update.message.text in _get_groups_for_subscribe(update):
                    SubscribersInGroups.objects.create(subscriber=subscriber,
                                                       group=Groups.objects.get(name=update.message.text))
                    update.message.reply_text('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É *{}*'.format(update.message.text),
                                              parse_mode='Markdown')
                    add(bot, update)

                elif update.message.text in _get_groups_for_unsibscribe(update):
                    update.message.reply_text('*–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ*\n'
                                              '_–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≥—Ä—É–ø–ø—É {}_'.format(update.message.text),
                                              parse_mode='Markdown', reply_markup=main_reply_markup)
                    add(bot, update)
                elif update.message.text == '–û—Ç–º–µ–Ω–∞':
                    cancel_last_operation(update, subscriber)
                else:
                    update.message.reply_text(TEXT_CANT_FIND_GROUP + ': ' + update.message.text)
                    add(bot, update)
            elif subscriber.subscribing_status == 'unsub':
                if update.message.text in _get_groups_for_unsibscribe(update):
                    obj = SubscribersInGroups.objects.get(subscriber=subscriber,
                                                          group=Groups.objects.get(name=update.message.text))
                    obj.delete()
                    update.message.reply_text('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≥—Ä—É–ø–ø—ã *{}*'.format(update.message.text),
                                              parse_mode='Markdown')
                    delete(bot, update)
                elif update.message.text in _get_groups_for_subscribe(update):
                    update.message.reply_text('*–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ:*\n'
                                              '_–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≥—Ä—É–ø–ø—É {}_'.format(update.message.text),
                                              parse_mode='Markdown')
                    delete(bot, update)
                elif update.message.text == '–û—Ç–º–µ–Ω–∞':
                    cancel_last_operation(update, subscriber)
                else:
                    update.message.reply_text(TEXT_CANT_FIND_GROUP + ': ' + update.message.text)
                    delete(bot, update)
            elif subscriber.subscribing_status == 'login':
                if update.message.text != '–û—Ç–º–µ–Ω–∞':
                    try:
                        user_login, user_pass = update.message.text.split(' ')
                        staff_user = authenticate(username=user_login, password=user_pass)
                        if not staff_user:
                            update.message.reply_text(TEXT_STAFF_LOGIN_ERROR, reply_markup=main_reply_markup)
                        else:
                            subscriber.exp_date_staff = localtime(now() + timedelta(1))
                            update.message.reply_text(TEXT_STAFF_LOGIN_SUCCESS, reply_markup=staff_reply_markup)
                    except ValueError:
                        update.message.reply_text(TEXT_STAFF_LOGIN_ERROR, reply_markup=main_reply_markup)
                else:
                    update.message.reply_text(
                        TEXT_CANCEL_LAST_OPERATION,
                        reply_markup=staff_reply_markup if _is_staff(subscriber) else main_reply_markup)
                subscriber.subscribing_status = None
                subscriber.save()
            elif subscriber.subscribing_status == 'get_mailing_group':
                if update.message.text in [group.name for group in Groups.objects.all()]:
                    get_mailing_text(bot, update)
                elif update.message.text == '–û—Ç–º–µ–Ω–∞':
                    cancel_last_operation(update, subscriber)
                else:
                    update.message.reply_text(TEXT_CANT_FIND_GROUP + ': ' + update.message.text)
                    get_mailing_group(bot, update)
            elif subscriber.subscribing_status == 'get_mailing_text':
                send_mailing(bot, update)
            elif subscriber.subscribing_status == 'card_expire':
                if update.message.text == '–û—Ç–º–µ–Ω–∞':
                    cancel_last_operation(update, subscriber)
                else:
                    try:
                        client_card = Cards.objects.get(card_number=update.message.text)
                        if not client_card.is_active:
                            update.message.reply_text(
                                '*{}*\n–°—Ç–∞—Ç—É—Å: –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'.format(client_card.name),
                                parse_mode='Markdown',
                                reply_markup=staff_reply_markup if _is_staff(subscriber) else main_reply_markup
                            )
                        elif client_card.exp_date < localtime(now()):
                            update.message.reply_text(
                                TEXT_CARD_NOT_FOUND.format(update.message.text),
                                parse_mode='Markdown',
                                reply_markup=staff_reply_markup if _is_staff(subscriber) else main_reply_markup
                            )
                        else:
                            update.message.reply_text(
                                '*{}*\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {}'.format(client_card.name,
                                                                client_card.exp_date.strftime('%d.%m.%Y')),
                                parse_mode='Markdown',
                                reply_markup=staff_reply_markup if _is_staff(subscriber) else main_reply_markup
                            )
                    except ObjectDoesNotExist:
                        update.message.reply_text(
                            TEXT_CARD_NOT_FOUND.format(update.message.text),
                            parse_mode='Markdown',
                            reply_markup=staff_reply_markup if _is_staff(subscriber) else main_reply_markup
                        )
                    subscriber.subscribing_status = None
                    subscriber.save()


def error(bot, update, error):
    logger.warn('Update "%s" caused error "%s"' % (update, error))


def main():
    logger.info("Loading handlers for telegram bot")

    # Default dispatcher (this is related to the first bot in settings.TELEGRAM_BOT_TOKENS)
    dp = DjangoTelegramBot.dispatcher
    # To get Dispatcher related to a specific bot
    # dp = DjangoTelegramBot.getDispatcher('BOT_n_token')     #get by bot token
    # dp = DjangoTelegramBot.getDispatcher('BOT_n_username')  #get by bot username

    # on different commands - answer in Telegram
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help))
    dp.add_handler(CommandHandler("card", card))
    dp.add_handler(CommandHandler("add", add))
    dp.add_handler(CommandHandler("delete", delete))
    dp.add_handler(CommandHandler("me", get_my_subscribes))
    dp.add_handler(CommandHandler("list", groups_list_and_timetable))
    dp.add_handler(CommandHandler("login", login))

    # on noncommand i.e message - echo the message on Telegram
    dp.add_handler(MessageHandler(Filters.text, text))

    # log all errors
    dp.add_error_handler(error)
